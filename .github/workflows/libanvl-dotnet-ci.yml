name: LibAnvl .NET CI

on:
  push:
    branches:
      - main
      - release/*
  pull_request:
    branches:
      - main
      - release/*
  workflow_dispatch:
    inputs:
      configuration:
        description: Configuration to build
        type: choice
        required: true
        options:
          - Debug
          - Release
      dotnet-verbosity:
        description: Verbosity for dotnet
        required: false
        default: 'normal'
      push-to-github:
        description: Push to GitHub package feed
        required: true
        default: true
      prepare-draft-release:
        description: Prepare draft release
        required: true
        default: true

concurrency:
  group: libanvl-dotnet-ci-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            coverage: true
            pack:     true
          - os: windows-latest
            coverage: false
            pack:     false
          - os: macos-latest
            coverage: false
            pack:     false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: pwsh
    outputs:
      prerelease-version: ${{ steps.nbgv.outputs.PrereleaseVersion }}
      tag-name: v${{ steps.nbgv.outputs.NuGetPackageVersion }}
      
    env:
      CONFIGURATION: ${{ github.event.inputs.configuration || 'Release' }}
      VERBOSITY: ${{ github.event.inputs.dotnet-verbosity || 'normal' }}

    steps:
      - name: 🧺 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work
      
      - name: 🏭 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: ./global.json
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      
      - name: 🔢 Nerdbank.GitVersioning
        uses: dotnet/nbgv@v0.4.2
        with:
          setCommonVars: true
        id: nbgv
      
      - name: ⚒️ Restore
        run: dotnet restore
      
      - name: ⚒️ Build
        run: |
          dotnet build `
          --configuration $env:CONFIGURATION `
          --no-restore `
          --verbosity $env:VERBOSITY `
          /p:ContinuousIntegrationBuild=true
      
      - name: 🧪 Test
        if: ${{ !matrix.coverage }}
        run: |
          dotnet test `
          --configuration $env:CONFIGURATION `
          --no-restore `
          --no-build `
          --verbosity $env:VERBOSITY
      
      - name: 🧪 Test With Coverage
        if: ${{ matrix.coverage }}
        run: |
          dotnet test `
          --configuration $env:CONFIGURATION `
          --no-restore `
          --no-build `
          --verbosity $env:VERBOSITY `
          /p:CollectCoverage=true `
          /p:CoverletOutputFormat=opencover
      
      - name: 💬 Print Public Release
        if: ${{ matrix.pack }}
        run: echo ${{ steps.nbgv.outputs.PublicRelease }}
      
      - name: 📦 Pack
        if: ${{ matrix.pack }}
        run: |
          dotnet pack `
          --configuration $env:CONFIGURATION `
          --no-restore `
          --no-build `
          --verbosity $env:VERBOSITY `
          --output nupkg
      
      - name: 📦 Write Nuget Version
        if: ${{ matrix.pack }}
        run: echo ${{ steps.nbgv.outputs.NuGetPackageVersion }} > ./nupkg/version.txt
      
      - name: 🌐 Upload Package Artifact
        if: ${{ matrix.pack }}
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./nupkg/*
      
      - name: 🌐 Upload Code Coverage
        if: ${{ matrix.coverage }}
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false # optional (default = false)
  
  push-to-github:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && github.event.inputs.push-to-github != 'false' }}
    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg
      - name: 📦 Push Package to GitHub
        uses: libanvl/github/actions/push-to-nuget@main
        with:
          nuget-api-key: ${{ secrets.GITHUB_TOKEN }}
          nuget-source: 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'
          package-path: ./nupkg/*.nupkg

  draft-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.prepare-draft-release != 'false') }}
    steps:
      - name: 🎢 Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg
      - name: 📋 Create Draft Release
        uses: softprops/action-gh-release@v2
        with:
          target_commitish: ${{ env.GITHUB_REF }}
          tag_name: ${{ needs.build.outputs.tag-name }}
          files: ./nupkg/*
          draft: true
          prerelease: true
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
